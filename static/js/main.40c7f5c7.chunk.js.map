{"version":3,"sources":["components/Header.js","services/HeaderService.js","utils/constants.js","components/children/Item.js","components/List.js","utils/ajax.js","containers/Shop.js","error/ErrorBoundary.js","App.js","serviceWorker.js","utils/interceptors.js","index.js"],"names":["Header","props","menus","console","log","className","href","brandName","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","map","element","key","name","link","placeholder","LABELS","Item","style","width","src","item","url","alt","price","List","items","length","getData","axios","defaults","baseURL","URL","get","Shop","state","this","localStorage","setState","JSON","parse","response","data","stringify","React","Component","ErrorBoundary","isError","errorMessage","err","info","children","App","Boolean","window","location","hostname","match","headers","post","token","tokenId","interceptors","request","use","loadSettings","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.40c7f5c7.chunk.js","sourcesContent":["import React from 'react';\nimport { HeaderService } from '../services/HeaderService';\nexport const Header = (props)=>{\n    const menus = HeaderService()['menu'];\n    console.log('Menus ',menus);\n\n\nreturn (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n  <a className=\"navbar-brand\" href=\"#\">{props.brandName}</a>\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span className=\"navbar-toggler-icon\"></span>\n  </button>\n\n  <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n    <ul className=\"navbar-nav mr-auto\">\n        {menus.map(element=>{return (\n            <li key={element.name} className=\"nav-item active\">\n            <a className=\"nav-link\" href={element.link}>{element.name} <span className=\"sr-only\">(current)</span></a>\n          </li>\n)})}\n      {/* <li className=\"nav-item active\">\n        <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\n      </li>\n      <li className=\"nav-item\">\n        <a className=\"nav-link\" href=\"#\">Link</a>\n      </li> */}\n\n\n    </ul>\n    <form className=\"form-inline my-2 my-lg-0\">\n      <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\n      <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\n    </form>\n  </div>\n</nav>\n);\n}","export const HeaderService = ()=>{\n    return {\n        \"menu\":[\n            {\"name\":\"Home\",\"link\":\"/\"},\n            {\"name\":\"About\",\"link\":\"/about\"},\n            {\"name\":\"TopSelling\",\"link\":\"/topselling\"}\n\n        ]\n    }\n}","export const LABELS = {\n    BRANDNAME:'Brain Mentors'\n}","import React from 'react';\nexport const Item = (props)=>{\n    const myStyle = {\n        width:'18rem'\n    };\n    return (\n        <div className=\"card\" style={myStyle}>\n  <img src={props.item.url} className=\"card-img-top\" alt=\"No Image Found\"/>\n  <div className=\"card-body\">\n    <h5 className=\"card-title\">{props.item.id}</h5>\n    <p className=\"card-text\">{props.item.name}</p>\n    <p className=\"card-text\">{props.item.price}</p>\n    <a href=\"#\" className=\"btn btn-primary\">Add to Cart</a>\n  </div>\n</div>\n    )\n}","import React from 'react';\nimport { Item } from './children/Item';\nexport const List = (props)=>{\n    console.log('Props are ::::::',props, ' typeof ',typeof props.items);\n    //return (<h1>fghdsgfjds</h1>)\n   // let len = props.items.length;\n    if(props.items && props.items.length>0){\n    return (\n        <>\n        {props.items.map(item=>{\n            return (<Item key={item.id} item = {item}/>);\n        })}\n        </>\n\n    );\n    }\n    else{\n        return (<div>No Record Found....</div>)\n    }\n\n}","import axios from 'axios';\n//import axios from './interceptors';\nexport function getData(){\n    console.log('$$$$$$$$$$$Axios Object is ',axios.defaults.baseURL);\n    // GET - QueryString\n    // URL?name=Amit&company=BrainMentors\n    // Get - Path Param\n    // URL/Amit/BrainMentors\n    //let token = localStorage.tokenId;\n    // axios.defaults.headers = {\n    //     'Cache-Control': 'no-cache',\n    //     'Pragma': 'no-cache',\n    //     'Expires': '0',\n    //   };\nconst URL = '/myserverdata/master/mobiles.json';\n\nconst options = {\n    //cors:true,\nmethod:'get',  //post, put, delete\nurl:URL,\ntimeout:5000,\nmaxContentLength:10000 //,\n//data:obj\n/* POST\ndata:{\n    price:1000,\n    qt:2\n}*/\n}\n// 1st\n//var promise = axios(options);\n// 2nd\n\n//var promise = axios.all(URL,{timeout:5000});\n\n// const axiosObject = axios.create({\n//     baseURL:'https://raw.githubusercontent.com/brainmentorspvtltd',\n//     headers:{'Content-Type':'application/xml'},\n//     method:'post'\n// });\n// axiosObject.interceptors.request.use(request=>{\n//     return request;\n// });\n// var p1= axiosObject.get(URL);\n\n\n// Remove Interceptor\n//axios.interceptors.request.eject(requestInterceptor);\nvar promise = axios.get(URL);\n    //{ headers: { \"Access-Control-Allow-Origin\": \"*\", }});\nreturn promise;\n// promise.then(response=>{\n// console.log('Response of Axios is ',response);\n// }).catch(err=>{\n// console.log('Error is ',err);\n// }).finally(()=>{\n// console.log('this code always run');\n// });\n}","import React from 'react';\nimport { Header } from '../components/Header';\nimport { LABELS } from '../utils/constants';\nimport { List } from '../components/List';\nimport {getData} from '../utils/ajax';\nexport class Shop extends React.Component{\n\nconstructor(props){\n    super(props);\n    this.state = {items:[]};\n    console.log('Shop Constructor call');\n}\n\n/*shouldComponentUpdate(prevProps, prevState) {\nconsole.log('Prev State is ',prevState);\n}*/\n\n/*\nstatic async getDerivedStateFromProps(props, state){\n    console.log('Shop ',this);\n    if( localStorage.items){\n    //this.setState({items:localStorage.items});\n    state = {items:JSON.parse(localStorage.items)['mobiles']};\n    }\n    else{\n    var response= await getData();\n    console.log('Response on Life Cycle '\n    ,response.data['mobiles']);\n    localStorage.items =\n    JSON.stringify(response.data);\n    state = {items:response.data['mobiles']};\n    //this.setState({items:response.data['mobiles']});\n    }\n    // promise.then(response=>{\n    //     console.log('Response of Axios is ',response);\n    //     }).catch(err=>{\n    //     console.log('Error is ',err);\n    //     }).finally(()=>{\n    //     console.log('this code always run');\n    //     });\n    console.log('getDerivedStateFromProps Call ',state\n    , ' Props ',props );\n    return state;\n}*/\n/*\nUNSAFE_componentWillMount(){\n    setTimeout(()=>{\n        console.log('I am Async and i call later');\n        this.setState({msg:'Set'});\n    },5000);\n    // Call (AJAX ) Async + setState\n    console.log('Will Mount Call');\n}*/\nrender(){\n    console.log('Render Call :::::: ',this.state.items);\n    return (<div>\n            <h1 className='alert-info text-center'>Shop Demo</h1>\n            <Header brandName = {LABELS.BRANDNAME}/>\n            <List items = {this.state.items}/>\n        </div>);\n}\nasync componentDidMount(){\n    console.log('componentWillMount:::::%%%%%%%%%%%%%%%%%%%%');\n    if( localStorage.items){\n        this.setState({items:\n            JSON.parse(localStorage.items)['mobiles']});\n        //state = {items:JSON.parse(localStorage.items)['mobiles']};\n        }\n        else{\n        var response= await getData();\n        console.log('Response on Life Cycle '\n        ,response.data['mobiles']);\n        localStorage.items =\n        JSON.stringify(response.data);\n        //state = {items:response.data['mobiles']};\n        this.setState({items:response.data['mobiles']});\n        //this.setState({items:undefined});\n    }\n\n}\n}","import React from 'react';\nexport class ErrorBoundary extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {isError:false,errorMessage:''};\n    }\n    componentDidCatch(err, info){\n        console.log('Component Did Catch Call ::: ErrorBoundary ',err, info);\n        this.setState({isError:true,errorMessage:'OOPS Something went Wrong'});\n    }\n    render(){\n        if(this.state.isError){\n            return (\n                <div>\n                    <h1>{this.state.errorMessage}</h1>\n                </div>\n            );\n        }\n        else{\n            return this.props.children;\n        }\n    }\n}","import React from 'react';\nimport { Shop } from './containers/Shop';\nimport { ErrorBoundary } from './error/ErrorBoundary';\nconst App = (props)=>{\n  return (\n    <div className='container'>\n      <ErrorBoundary>\n      <Shop/>\n      </ErrorBoundary>\n    </div>\n  );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\nexport function loadSettings(){\nconsole.log('LOAD SETTING IS #######################');\naxios.defaults.baseURL = 'https://raw.githubusercontent.com/brainmentorspvtltd';\naxios.defaults.headers.post['Content-Type']='application/json';\nvar token = localStorage.tokenId;\naxios.interceptors.request.use(request=>{\n    request.tokenId = token;\n    console.log('Request Interceptor is Running ',request.tokenId);\n    return request;\n});\naxios.interceptors.response.use(response=>{\n    response.headers['secure']= 'Brain Mentors Headers';\n    console.log('Response Interceptor is Running');\n    return response;\n});\nconsole.log('After All Things ',axios.defaults.baseURL);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {loadSettings} from './utils/interceptors';\nloadSettings();\nReactDOM.render(\n\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}